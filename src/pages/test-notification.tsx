import { useEffect, useState } from 'react'
import { io } from 'socket.io-client'

export default function TestNotification() {
  const [logs, setLogs] = useState<string[]>([])
  const [userId, setUserId] = useState('daca6413-e0ad-45a5-9e00-ee27bd2dce8d')

  const addLog = (message: string) => {
    console.log(message)
    setLogs(prev => [...prev, `${new Date().toLocaleTimeString()}: ${message}`])
  }

  useEffect(() => {
    if (!userId) return

    addLog('–°–æ–∑–¥–∞—é socket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...')
    const socket = io('http://localhost:4000')

    socket.on('connect', () => {
      addLog(`‚úÖ Socket –ø–æ–¥–∫–ª—é—á–µ–Ω! Socket ID: ${socket.id}`)
      addLog(`–û—Ç–ø—Ä–∞–≤–ª—è—é joinNotifications –¥–ª—è user: ${userId}`)
      socket.emit('joinNotifications', userId)
    })

    socket.on('disconnect', () => {
      addLog('‚ùå Socket –æ—Ç–∫–ª—é—á–µ–Ω')
    })

    socket.on('connect_error', (error) => {
      addLog(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`)
    })

    socket.on('notification', (notification: any) => {
      addLog(`üì© –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${JSON.stringify(notification)}`)
    })

    return () => {
      addLog('–û—Ç–∫–ª—é—á–∞—é—Å—å...')
      socket.disconnect()
    }
  }, [userId])

  return (
    <div className="p-8 max-w-4xl mx-auto">
      <h1 className="text-2xl font-bold mb-4">–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π Socket.io</h1>
      
      <div className="mb-4">
        <label className="block text-sm font-medium mb-2">User ID:</label>
        <input
          type="text"
          value={userId}
          onChange={(e) => setUserId(e.target.value)}
          className="w-full p-2 border rounded"
          placeholder="–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        />
      </div>

      <div className="bg-gray-100 p-4 rounded-lg">
        <h2 className="font-semibold mb-2">–õ–æ–≥–∏:</h2>
        <div className="space-y-1 font-mono text-sm max-h-96 overflow-y-auto">
          {logs.length === 0 && <p className="text-gray-500">–õ–æ–≥–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å...</p>}
          {logs.map((log, i) => (
            <div key={i} className="text-xs">{log}</div>
          ))}
        </div>
      </div>

      <div className="mt-4 p-4 bg-blue-50 rounded-lg">
        <h3 className="font-semibold mb-2">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</h3>
        <ol className="list-decimal list-inside space-y-1 text-sm">
          <li>–û—Ç–∫—Ä–æ–π—Ç–µ —ç—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—É</li>
          <li>–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ socket –ø–æ–¥–∫–ª—é—á–µ–Ω (‚úÖ)</li>
          <li>–û—Ç–∫—Ä–æ–π—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≥–µ–Ω—Ç–∞ –≤ –¥—Ä—É–≥–æ–π –≤–∫–ª–∞–¥–∫–µ</li>
          <li>–ù–∞–∂–º–∏—Ç–µ "–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É" –Ω–∞ –∑–∞—è–≤–∫–µ</li>
          <li>–ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–æ –ø–æ—è–≤–∏—Ç—å—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ üì©</li>
        </ol>
      </div>
    </div>
  )
}
